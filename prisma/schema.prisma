// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String    @db.VarChar(50)
  lastName  String    @db.VarChar(50)
  email     String    @unique
  password  String    
  image     String?    
  location  String?   @db.VarChar(150)
  phone     String?   @db.VarChar(150)
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]     
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        String          @id @default(uuid())
  name      String          @db.VarChar(50)
  image     String?         @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subCats   Sub_Category[]     
  services  Service[]
}

model Sub_Category {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(50)
  image     String?   @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  category  Category  @relation(fields: [catId] , references: [id] , onDelete: Cascade)  
  catId     String  
  services  Service[]      
}

model Service {
  id                  String                @id @default(uuid())
  name                String                @db.VarChar(50)
  desc                String                @db.VarChar(500)
  user                User                  @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  userId              String
  subCat              Sub_Category          @relation(fields: [subCatId] , references: [id] , onDelete: Cascade)   
  subCatId            String  
  cat                 Category              @relation(fields: [catId] , references: [id] , onDelete: Cascade)   
  catId               String 
  StoreServices       StoreService[]
  ContractorServices  ContractorService[]
  LaborServices       LaborService[]
  PropertyServices    PropertyService[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model StoreService {
  id                  String    @id @default(uuid())
  image               String?   @db.VarChar(150)
  rating              Float?    @default(0)
  websitePage         String?   @db.VarChar(150)
  city                String?   @db.VarChar(150)
  area                String?   @db.VarChar(150)
  street              String?   @db.VarChar(150)
  locLat              String    @db.VarChar(50)
  locLng              String    @db.VarChar(50)
  availableDays       String    @db.VarChar(250)
  from                Int       @default(8)
  to                  Int       @default(10)
  service             Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId           String
}

model ContractorService {
  id                  String    @id @default(uuid())
  experience          Int       @default(0)
  city                String?   @db.VarChar(150)
  availabilityHours   Int       @default(0)
  availabilityRange   String    @db.VarChar(150)
  rate                Int       @default(0)
  rateRange           String    @db.VarChar(150)
  email               String    @db.VarChar(150)
  phone               String    @db.VarChar(150)
  service             Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId           String
}

model LaborService {
  id                  String    @id @default(uuid())
  city                String    @db.VarChar(150)
  area                String    @db.VarChar(150)
  rate                Int?      @default(0)
  rateRange           String    @db.VarChar(150)
  availableDays       String    @db.VarChar(500)
  phone               String    @db.VarChar(150)
  service             Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId           String
}

model PropertyService {
  id                  String    @id @default(uuid())
  price               Float     @default(0)
  image               String    @db.VarChar(150)
  isNegotiable        Boolean   @default(true)
  sellerCity          String    @db.VarChar(150)
  sellerArea          String    @db.VarChar(150)
  sellerStreet        String?   @db.VarChar(150)
  locLat              String?   @db.VarChar(50)
  locLng              String?   @db.VarChar(50)
  service             Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId           String
}